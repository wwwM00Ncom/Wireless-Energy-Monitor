
UART_Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000e72  00000ee6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e72  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c75  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00001ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ea  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000511  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f5  00000000  00000000  000032d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000034c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bb 02 	call	0x576	; 0x576 <main>
  8e:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ASCII_Transmit>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdbool.h>
#include "ASCII_Transmit.h"

uint8_t ASCII_Transmit(uint8_t transmitting_number){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <ASCII_Transmit+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t transmitted_number = transmitting_number + 48;
  a2:	8a 81       	ldd	r24, Y+2	; 0x02
  a4:	80 5d       	subi	r24, 0xD0	; 208
  a6:	89 83       	std	Y+1, r24	; 0x01
	return transmitted_number;
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	0f 90       	pop	r0
  ac:	0f 90       	pop	r0
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <Individual_Digits_first>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdbool.h>
#include "Individual_Digits.h"

uint8_t Individual_Digits_first(float number){
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	29 97       	sbiw	r28, 0x09	; 9
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	6e 83       	std	Y+6, r22	; 0x06
  ca:	7f 83       	std	Y+7, r23	; 0x07
  cc:	88 87       	std	Y+8, r24	; 0x08
  ce:	99 87       	std	Y+9, r25	; 0x09
	uint16_t integer;
	if ((number < 10) && (number > 0)){
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	40 e2       	ldi	r20, 0x20	; 32
  d6:	51 e4       	ldi	r21, 0x41	; 65
  d8:	6e 81       	ldd	r22, Y+6	; 0x06
  da:	7f 81       	ldd	r23, Y+7	; 0x07
  dc:	88 85       	ldd	r24, Y+8	; 0x08
  de:	99 85       	ldd	r25, Y+9	; 0x09
  e0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
  e4:	88 23       	and	r24, r24
  e6:	04 f5       	brge	.+64     	; 0x128 <Individual_Digits_first+0x74>
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	a9 01       	movw	r20, r18
  ee:	6e 81       	ldd	r22, Y+6	; 0x06
  f0:	7f 81       	ldd	r23, Y+7	; 0x07
  f2:	88 85       	ldd	r24, Y+8	; 0x08
  f4:	99 85       	ldd	r25, Y+9	; 0x09
  f6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
  fa:	18 16       	cp	r1, r24
  fc:	ac f4       	brge	.+42     	; 0x128 <Individual_Digits_first+0x74>
		integer = number * 100;
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	48 ec       	ldi	r20, 0xC8	; 200
 104:	52 e4       	ldi	r21, 0x42	; 66
 106:	6e 81       	ldd	r22, Y+6	; 0x06
 108:	7f 81       	ldd	r23, Y+7	; 0x07
 10a:	88 85       	ldd	r24, Y+8	; 0x08
 10c:	99 85       	ldd	r25, Y+9	; 0x09
 10e:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 112:	dc 01       	movw	r26, r24
 114:	cb 01       	movw	r24, r22
 116:	bc 01       	movw	r22, r24
 118:	cd 01       	movw	r24, r26
 11a:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	9a 83       	std	Y+2, r25	; 0x02
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	37 c0       	rjmp	.+110    	; 0x196 <Individual_Digits_first+0xe2>
	}
	else if ((number >= 10) && (number < 100)){
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 e2       	ldi	r20, 0x20	; 32
 12e:	51 e4       	ldi	r21, 0x41	; 65
 130:	6e 81       	ldd	r22, Y+6	; 0x06
 132:	7f 81       	ldd	r23, Y+7	; 0x07
 134:	88 85       	ldd	r24, Y+8	; 0x08
 136:	99 85       	ldd	r25, Y+9	; 0x09
 138:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 13c:	88 23       	and	r24, r24
 13e:	0c f1       	brlt	.+66     	; 0x182 <Individual_Digits_first+0xce>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	48 ec       	ldi	r20, 0xC8	; 200
 146:	52 e4       	ldi	r21, 0x42	; 66
 148:	6e 81       	ldd	r22, Y+6	; 0x06
 14a:	7f 81       	ldd	r23, Y+7	; 0x07
 14c:	88 85       	ldd	r24, Y+8	; 0x08
 14e:	99 85       	ldd	r25, Y+9	; 0x09
 150:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 154:	88 23       	and	r24, r24
 156:	ac f4       	brge	.+42     	; 0x182 <Individual_Digits_first+0xce>
		integer = number * 10;
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e2       	ldi	r20, 0x20	; 32
 15e:	51 e4       	ldi	r21, 0x41	; 65
 160:	6e 81       	ldd	r22, Y+6	; 0x06
 162:	7f 81       	ldd	r23, Y+7	; 0x07
 164:	88 85       	ldd	r24, Y+8	; 0x08
 166:	99 85       	ldd	r25, Y+9	; 0x09
 168:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	0a c0       	rjmp	.+20     	; 0x196 <Individual_Digits_first+0xe2>
	}
	else{
		integer = number;
 182:	6e 81       	ldd	r22, Y+6	; 0x06
 184:	7f 81       	ldd	r23, Y+7	; 0x07
 186:	88 85       	ldd	r24, Y+8	; 0x08
 188:	99 85       	ldd	r25, Y+9	; 0x09
 18a:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	9a 83       	std	Y+2, r25	; 0x02
 194:	89 83       	std	Y+1, r24	; 0x01
	}
	uint8_t first = (uint8_t) (integer / 100);
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	9c 01       	movw	r18, r24
 1a4:	ab e7       	ldi	r26, 0x7B	; 123
 1a6:	b4 e1       	ldi	r27, 0x14	; 20
 1a8:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t second = (uint8_t) ((integer / 10) % 10);
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	9a 81       	ldd	r25, Y+2	; 0x02
 1b6:	9c 01       	movw	r18, r24
 1b8:	ad ec       	ldi	r26, 0xCD	; 205
 1ba:	bc ec       	ldi	r27, 0xCC	; 204
 1bc:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 1c0:	ac 01       	movw	r20, r24
 1c2:	56 95       	lsr	r21
 1c4:	47 95       	ror	r20
 1c6:	56 95       	lsr	r21
 1c8:	47 95       	ror	r20
 1ca:	56 95       	lsr	r21
 1cc:	47 95       	ror	r20
 1ce:	9a 01       	movw	r18, r20
 1d0:	ad ec       	ldi	r26, 0xCD	; 205
 1d2:	bc ec       	ldi	r27, 0xCC	; 204
 1d4:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	96 95       	lsr	r25
 1de:	87 95       	ror	r24
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	9c 01       	movw	r18, r24
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	82 0f       	add	r24, r18
 1f4:	93 1f       	adc	r25, r19
 1f6:	9a 01       	movw	r18, r20
 1f8:	28 1b       	sub	r18, r24
 1fa:	39 0b       	sbc	r19, r25
 1fc:	c9 01       	movw	r24, r18
 1fe:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t third = (uint8_t) (integer % 10);
 200:	49 81       	ldd	r20, Y+1	; 0x01
 202:	5a 81       	ldd	r21, Y+2	; 0x02
 204:	9a 01       	movw	r18, r20
 206:	ad ec       	ldi	r26, 0xCD	; 205
 208:	bc ec       	ldi	r27, 0xCC	; 204
 20a:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 20e:	96 95       	lsr	r25
 210:	87 95       	ror	r24
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	9c 01       	movw	r18, r24
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	82 0f       	add	r24, r18
 22a:	93 1f       	adc	r25, r19
 22c:	9a 01       	movw	r18, r20
 22e:	28 1b       	sub	r18, r24
 230:	39 0b       	sbc	r19, r25
 232:	c9 01       	movw	r24, r18
 234:	8d 83       	std	Y+5, r24	; 0x05
	return first;
 236:	8b 81       	ldd	r24, Y+3	; 0x03
}
 238:	29 96       	adiw	r28, 0x09	; 9
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <Individual_Digits_second>:

uint8_t Individual_Digits_second(float number){
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	29 97       	sbiw	r28, 0x09	; 9
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
 25e:	6e 83       	std	Y+6, r22	; 0x06
 260:	7f 83       	std	Y+7, r23	; 0x07
 262:	88 87       	std	Y+8, r24	; 0x08
 264:	99 87       	std	Y+9, r25	; 0x09
	uint16_t integer;
	if ((number < 10) && (number > 0)){
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	40 e2       	ldi	r20, 0x20	; 32
 26c:	51 e4       	ldi	r21, 0x41	; 65
 26e:	6e 81       	ldd	r22, Y+6	; 0x06
 270:	7f 81       	ldd	r23, Y+7	; 0x07
 272:	88 85       	ldd	r24, Y+8	; 0x08
 274:	99 85       	ldd	r25, Y+9	; 0x09
 276:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 27a:	88 23       	and	r24, r24
 27c:	04 f5       	brge	.+64     	; 0x2be <Individual_Digits_second+0x74>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	a9 01       	movw	r20, r18
 284:	6e 81       	ldd	r22, Y+6	; 0x06
 286:	7f 81       	ldd	r23, Y+7	; 0x07
 288:	88 85       	ldd	r24, Y+8	; 0x08
 28a:	99 85       	ldd	r25, Y+9	; 0x09
 28c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 290:	18 16       	cp	r1, r24
 292:	ac f4       	brge	.+42     	; 0x2be <Individual_Digits_second+0x74>
		integer = number * 100;
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	48 ec       	ldi	r20, 0xC8	; 200
 29a:	52 e4       	ldi	r21, 0x42	; 66
 29c:	6e 81       	ldd	r22, Y+6	; 0x06
 29e:	7f 81       	ldd	r23, Y+7	; 0x07
 2a0:	88 85       	ldd	r24, Y+8	; 0x08
 2a2:	99 85       	ldd	r25, Y+9	; 0x09
 2a4:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 2a8:	dc 01       	movw	r26, r24
 2aa:	cb 01       	movw	r24, r22
 2ac:	bc 01       	movw	r22, r24
 2ae:	cd 01       	movw	r24, r26
 2b0:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 2b4:	dc 01       	movw	r26, r24
 2b6:	cb 01       	movw	r24, r22
 2b8:	9a 83       	std	Y+2, r25	; 0x02
 2ba:	89 83       	std	Y+1, r24	; 0x01
 2bc:	37 c0       	rjmp	.+110    	; 0x32c <Individual_Digits_second+0xe2>
	}
	else if ((number >= 10) && (number < 100)){
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e2       	ldi	r20, 0x20	; 32
 2c4:	51 e4       	ldi	r21, 0x41	; 65
 2c6:	6e 81       	ldd	r22, Y+6	; 0x06
 2c8:	7f 81       	ldd	r23, Y+7	; 0x07
 2ca:	88 85       	ldd	r24, Y+8	; 0x08
 2cc:	99 85       	ldd	r25, Y+9	; 0x09
 2ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 2d2:	88 23       	and	r24, r24
 2d4:	0c f1       	brlt	.+66     	; 0x318 <Individual_Digits_second+0xce>
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	48 ec       	ldi	r20, 0xC8	; 200
 2dc:	52 e4       	ldi	r21, 0x42	; 66
 2de:	6e 81       	ldd	r22, Y+6	; 0x06
 2e0:	7f 81       	ldd	r23, Y+7	; 0x07
 2e2:	88 85       	ldd	r24, Y+8	; 0x08
 2e4:	99 85       	ldd	r25, Y+9	; 0x09
 2e6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 2ea:	88 23       	and	r24, r24
 2ec:	ac f4       	brge	.+42     	; 0x318 <Individual_Digits_second+0xce>
		integer = number * 10;
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 e2       	ldi	r20, 0x20	; 32
 2f4:	51 e4       	ldi	r21, 0x41	; 65
 2f6:	6e 81       	ldd	r22, Y+6	; 0x06
 2f8:	7f 81       	ldd	r23, Y+7	; 0x07
 2fa:	88 85       	ldd	r24, Y+8	; 0x08
 2fc:	99 85       	ldd	r25, Y+9	; 0x09
 2fe:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 302:	dc 01       	movw	r26, r24
 304:	cb 01       	movw	r24, r22
 306:	bc 01       	movw	r22, r24
 308:	cd 01       	movw	r24, r26
 30a:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 30e:	dc 01       	movw	r26, r24
 310:	cb 01       	movw	r24, r22
 312:	9a 83       	std	Y+2, r25	; 0x02
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	0a c0       	rjmp	.+20     	; 0x32c <Individual_Digits_second+0xe2>
	}
	else{
		integer = number;
 318:	6e 81       	ldd	r22, Y+6	; 0x06
 31a:	7f 81       	ldd	r23, Y+7	; 0x07
 31c:	88 85       	ldd	r24, Y+8	; 0x08
 31e:	99 85       	ldd	r25, Y+9	; 0x09
 320:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 324:	dc 01       	movw	r26, r24
 326:	cb 01       	movw	r24, r22
 328:	9a 83       	std	Y+2, r25	; 0x02
 32a:	89 83       	std	Y+1, r24	; 0x01
	}
	uint8_t first = (uint8_t) (integer / 100);
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	9c 01       	movw	r18, r24
 33a:	ab e7       	ldi	r26, 0x7B	; 123
 33c:	b4 e1       	ldi	r27, 0x14	; 20
 33e:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 342:	96 95       	lsr	r25
 344:	87 95       	ror	r24
 346:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t second = (uint8_t) ((integer / 10) % 10);
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	9c 01       	movw	r18, r24
 34e:	ad ec       	ldi	r26, 0xCD	; 205
 350:	bc ec       	ldi	r27, 0xCC	; 204
 352:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 356:	ac 01       	movw	r20, r24
 358:	56 95       	lsr	r21
 35a:	47 95       	ror	r20
 35c:	56 95       	lsr	r21
 35e:	47 95       	ror	r20
 360:	56 95       	lsr	r21
 362:	47 95       	ror	r20
 364:	9a 01       	movw	r18, r20
 366:	ad ec       	ldi	r26, 0xCD	; 205
 368:	bc ec       	ldi	r27, 0xCC	; 204
 36a:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	9c 01       	movw	r18, r24
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	22 0f       	add	r18, r18
 386:	33 1f       	adc	r19, r19
 388:	82 0f       	add	r24, r18
 38a:	93 1f       	adc	r25, r19
 38c:	9a 01       	movw	r18, r20
 38e:	28 1b       	sub	r18, r24
 390:	39 0b       	sbc	r19, r25
 392:	c9 01       	movw	r24, r18
 394:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t third = (uint8_t) (integer % 10);
 396:	49 81       	ldd	r20, Y+1	; 0x01
 398:	5a 81       	ldd	r21, Y+2	; 0x02
 39a:	9a 01       	movw	r18, r20
 39c:	ad ec       	ldi	r26, 0xCD	; 205
 39e:	bc ec       	ldi	r27, 0xCC	; 204
 3a0:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	9c 01       	movw	r18, r24
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	82 0f       	add	r24, r18
 3c0:	93 1f       	adc	r25, r19
 3c2:	9a 01       	movw	r18, r20
 3c4:	28 1b       	sub	r18, r24
 3c6:	39 0b       	sbc	r19, r25
 3c8:	c9 01       	movw	r24, r18
 3ca:	8d 83       	std	Y+5, r24	; 0x05
	return second;
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
}
 3ce:	29 96       	adiw	r28, 0x09	; 9
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <Individual_Digits_third>:

uint8_t Individual_Digits_third(float number){
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	29 97       	sbiw	r28, 0x09	; 9
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	6e 83       	std	Y+6, r22	; 0x06
 3f6:	7f 83       	std	Y+7, r23	; 0x07
 3f8:	88 87       	std	Y+8, r24	; 0x08
 3fa:	99 87       	std	Y+9, r25	; 0x09
	uint16_t integer;
	if ((number < 10) && (number > 0)){
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	40 e2       	ldi	r20, 0x20	; 32
 402:	51 e4       	ldi	r21, 0x41	; 65
 404:	6e 81       	ldd	r22, Y+6	; 0x06
 406:	7f 81       	ldd	r23, Y+7	; 0x07
 408:	88 85       	ldd	r24, Y+8	; 0x08
 40a:	99 85       	ldd	r25, Y+9	; 0x09
 40c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 410:	88 23       	and	r24, r24
 412:	04 f5       	brge	.+64     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	a9 01       	movw	r20, r18
 41a:	6e 81       	ldd	r22, Y+6	; 0x06
 41c:	7f 81       	ldd	r23, Y+7	; 0x07
 41e:	88 85       	ldd	r24, Y+8	; 0x08
 420:	99 85       	ldd	r25, Y+9	; 0x09
 422:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 426:	18 16       	cp	r1, r24
 428:	ac f4       	brge	.+42     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		integer = number * 100;
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	48 ec       	ldi	r20, 0xC8	; 200
 430:	52 e4       	ldi	r21, 0x42	; 66
 432:	6e 81       	ldd	r22, Y+6	; 0x06
 434:	7f 81       	ldd	r23, Y+7	; 0x07
 436:	88 85       	ldd	r24, Y+8	; 0x08
 438:	99 85       	ldd	r25, Y+9	; 0x09
 43a:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 43e:	dc 01       	movw	r26, r24
 440:	cb 01       	movw	r24, r22
 442:	bc 01       	movw	r22, r24
 444:	cd 01       	movw	r24, r26
 446:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 44a:	dc 01       	movw	r26, r24
 44c:	cb 01       	movw	r24, r22
 44e:	9a 83       	std	Y+2, r25	; 0x02
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	37 c0       	rjmp	.+110    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
	}
	else if ((number >= 10) && (number < 100)){
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	40 e2       	ldi	r20, 0x20	; 32
 45a:	51 e4       	ldi	r21, 0x41	; 65
 45c:	6e 81       	ldd	r22, Y+6	; 0x06
 45e:	7f 81       	ldd	r23, Y+7	; 0x07
 460:	88 85       	ldd	r24, Y+8	; 0x08
 462:	99 85       	ldd	r25, Y+9	; 0x09
 464:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 468:	88 23       	and	r24, r24
 46a:	0c f1       	brlt	.+66     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	48 ec       	ldi	r20, 0xC8	; 200
 472:	52 e4       	ldi	r21, 0x42	; 66
 474:	6e 81       	ldd	r22, Y+6	; 0x06
 476:	7f 81       	ldd	r23, Y+7	; 0x07
 478:	88 85       	ldd	r24, Y+8	; 0x08
 47a:	99 85       	ldd	r25, Y+9	; 0x09
 47c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 480:	88 23       	and	r24, r24
 482:	ac f4       	brge	.+42     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		integer = number * 10;
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	40 e2       	ldi	r20, 0x20	; 32
 48a:	51 e4       	ldi	r21, 0x41	; 65
 48c:	6e 81       	ldd	r22, Y+6	; 0x06
 48e:	7f 81       	ldd	r23, Y+7	; 0x07
 490:	88 85       	ldd	r24, Y+8	; 0x08
 492:	99 85       	ldd	r25, Y+9	; 0x09
 494:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 498:	dc 01       	movw	r26, r24
 49a:	cb 01       	movw	r24, r22
 49c:	bc 01       	movw	r22, r24
 49e:	cd 01       	movw	r24, r26
 4a0:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 4a4:	dc 01       	movw	r26, r24
 4a6:	cb 01       	movw	r24, r22
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	89 83       	std	Y+1, r24	; 0x01
 4ac:	0a c0       	rjmp	.+20     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
	}
	else{
		integer = number;
 4ae:	6e 81       	ldd	r22, Y+6	; 0x06
 4b0:	7f 81       	ldd	r23, Y+7	; 0x07
 4b2:	88 85       	ldd	r24, Y+8	; 0x08
 4b4:	99 85       	ldd	r25, Y+9	; 0x09
 4b6:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 4ba:	dc 01       	movw	r26, r24
 4bc:	cb 01       	movw	r24, r22
 4be:	9a 83       	std	Y+2, r25	; 0x02
 4c0:	89 83       	std	Y+1, r24	; 0x01
	}
	uint8_t first = (uint8_t) (integer / 100);
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	9a 81       	ldd	r25, Y+2	; 0x02
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	96 95       	lsr	r25
 4cc:	87 95       	ror	r24
 4ce:	9c 01       	movw	r18, r24
 4d0:	ab e7       	ldi	r26, 0x7B	; 123
 4d2:	b4 e1       	ldi	r27, 0x14	; 20
 4d4:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t second = (uint8_t) ((integer / 10) % 10);
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	9a 81       	ldd	r25, Y+2	; 0x02
 4e2:	9c 01       	movw	r18, r24
 4e4:	ad ec       	ldi	r26, 0xCD	; 205
 4e6:	bc ec       	ldi	r27, 0xCC	; 204
 4e8:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 4ec:	ac 01       	movw	r20, r24
 4ee:	56 95       	lsr	r21
 4f0:	47 95       	ror	r20
 4f2:	56 95       	lsr	r21
 4f4:	47 95       	ror	r20
 4f6:	56 95       	lsr	r21
 4f8:	47 95       	ror	r20
 4fa:	9a 01       	movw	r18, r20
 4fc:	ad ec       	ldi	r26, 0xCD	; 205
 4fe:	bc ec       	ldi	r27, 0xCC	; 204
 500:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	96 95       	lsr	r25
 50e:	87 95       	ror	r24
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	9c 01       	movw	r18, r24
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	82 0f       	add	r24, r18
 520:	93 1f       	adc	r25, r19
 522:	9a 01       	movw	r18, r20
 524:	28 1b       	sub	r18, r24
 526:	39 0b       	sbc	r19, r25
 528:	c9 01       	movw	r24, r18
 52a:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t third = (uint8_t) (integer % 10);
 52c:	49 81       	ldd	r20, Y+1	; 0x01
 52e:	5a 81       	ldd	r21, Y+2	; 0x02
 530:	9a 01       	movw	r18, r20
 532:	ad ec       	ldi	r26, 0xCD	; 205
 534:	bc ec       	ldi	r27, 0xCC	; 204
 536:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 53a:	96 95       	lsr	r25
 53c:	87 95       	ror	r24
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	9c 01       	movw	r18, r24
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	82 0f       	add	r24, r18
 556:	93 1f       	adc	r25, r19
 558:	9a 01       	movw	r18, r20
 55a:	28 1b       	sub	r18, r24
 55c:	39 0b       	sbc	r19, r25
 55e:	c9 01       	movw	r24, r18
 560:	8d 83       	std	Y+5, r24	; 0x05
	return third;
 562:	8d 81       	ldd	r24, Y+5	; 0x05
 564:	29 96       	adiw	r28, 0x09	; 9
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <main>:
#define   RMSVoltage   14.5
#define   PeakCurrent   125
#define   Power         1.60

int main(void)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	c2 58       	subi	r28, 0x82	; 130
 580:	d1 09       	sbc	r29, r1
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
	/*initial*/
	usart_init(UBRR);
 58c:	8c e0       	ldi	r24, 0x0C	; 12
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 b3 05 	call	0xb66	; 0xb66 <usart_init>
	
	/*Extract the individual digits of a 3 digit number*/
	uint8_t RMS_V[3];
	RMS_V[0] = Individual_Digits_first(RMSVoltage);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	88 e6       	ldi	r24, 0x68	; 104
 59a:	91 e4       	ldi	r25, 0x41	; 65
 59c:	0e 94 5a 00 	call	0xb4	; 0xb4 <Individual_Digits_first>
 5a0:	8c af       	std	Y+60, r24	; 0x3c
	RMS_V[1] = Individual_Digits_second(RMSVoltage);
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	88 e6       	ldi	r24, 0x68	; 104
 5a8:	91 e4       	ldi	r25, 0x41	; 65
 5aa:	0e 94 25 01 	call	0x24a	; 0x24a <Individual_Digits_second>
 5ae:	8d af       	std	Y+61, r24	; 0x3d
	RMS_V[2] = Individual_Digits_third(RMSVoltage);
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	88 e6       	ldi	r24, 0x68	; 104
 5b6:	91 e4       	ldi	r25, 0x41	; 65
 5b8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Individual_Digits_third>
 5bc:	8e af       	std	Y+62, r24	; 0x3e
	uint8_t Peak_I[3];
	Peak_I[0] = Individual_Digits_first(PeakCurrent);
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	8a ef       	ldi	r24, 0xFA	; 250
 5c4:	92 e4       	ldi	r25, 0x42	; 66
 5c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <Individual_Digits_first>
 5ca:	28 2f       	mov	r18, r24
 5cc:	ce 01       	movw	r24, r28
 5ce:	cf 96       	adiw	r24, 0x3f	; 63
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
	Peak_I[1] = Individual_Digits_second(PeakCurrent);
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	8a ef       	ldi	r24, 0xFA	; 250
 5da:	92 e4       	ldi	r25, 0x42	; 66
 5dc:	0e 94 25 01 	call	0x24a	; 0x24a <Individual_Digits_second>
 5e0:	28 2f       	mov	r18, r24
 5e2:	ce 01       	movw	r24, r28
 5e4:	cf 96       	adiw	r24, 0x3f	; 63
 5e6:	fc 01       	movw	r30, r24
 5e8:	21 83       	std	Z+1, r18	; 0x01
	Peak_I[2] = Individual_Digits_third(PeakCurrent);
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	8a ef       	ldi	r24, 0xFA	; 250
 5f0:	92 e4       	ldi	r25, 0x42	; 66
 5f2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Individual_Digits_third>
 5f6:	28 2f       	mov	r18, r24
 5f8:	ce 01       	movw	r24, r28
 5fa:	cf 96       	adiw	r24, 0x3f	; 63
 5fc:	fc 01       	movw	r30, r24
 5fe:	22 83       	std	Z+2, r18	; 0x02
	uint8_t P[3];
	P[0] = Individual_Digits_first(Power);
 600:	6d ec       	ldi	r22, 0xCD	; 205
 602:	7c ec       	ldi	r23, 0xCC	; 204
 604:	8c ec       	ldi	r24, 0xCC	; 204
 606:	9f e3       	ldi	r25, 0x3F	; 63
 608:	0e 94 5a 00 	call	0xb4	; 0xb4 <Individual_Digits_first>
 60c:	28 2f       	mov	r18, r24
 60e:	ce 01       	movw	r24, r28
 610:	8e 5b       	subi	r24, 0xBE	; 190
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	fc 01       	movw	r30, r24
 616:	20 83       	st	Z, r18
	P[1] = Individual_Digits_second(Power);
 618:	6d ec       	ldi	r22, 0xCD	; 205
 61a:	7c ec       	ldi	r23, 0xCC	; 204
 61c:	8c ec       	ldi	r24, 0xCC	; 204
 61e:	9f e3       	ldi	r25, 0x3F	; 63
 620:	0e 94 25 01 	call	0x24a	; 0x24a <Individual_Digits_second>
 624:	28 2f       	mov	r18, r24
 626:	ce 01       	movw	r24, r28
 628:	8e 5b       	subi	r24, 0xBE	; 190
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	fc 01       	movw	r30, r24
 62e:	21 83       	std	Z+1, r18	; 0x01
	P[2] = Individual_Digits_third(Power);
 630:	6d ec       	ldi	r22, 0xCD	; 205
 632:	7c ec       	ldi	r23, 0xCC	; 204
 634:	8c ec       	ldi	r24, 0xCC	; 204
 636:	9f e3       	ldi	r25, 0x3F	; 63
 638:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Individual_Digits_third>
 63c:	28 2f       	mov	r18, r24
 63e:	ce 01       	movw	r24, r28
 640:	8e 5b       	subi	r24, 0xBE	; 190
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	fc 01       	movw	r30, r24
 646:	22 83       	std	Z+2, r18	; 0x02
	
	/*Output ASCII code*/
	/*32 = space; 88 = X (use to find if there is any bug, it will show 'X' when output); 46 = '.'; 13 + 10 = new line*/
	char RMS_V_Print[22] = {'R', 'M', 'S', 32, 'V', 'o', 'l', 't', 'a', 'g', 'e', 32, 'i', 's', ':', 32, 88, 88, 46, 88, 13, 10};
 648:	ce 01       	movw	r24, r28
 64a:	8b 5b       	subi	r24, 0xBB	; 187
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	26 e1       	ldi	r18, 0x16	; 22
 650:	e0 e0       	ldi	r30, 0x00	; 0
 652:	f1 e0       	ldi	r31, 0x01	; 1
 654:	dc 01       	movw	r26, r24
 656:	01 90       	ld	r0, Z+
 658:	0d 92       	st	X+, r0
 65a:	2a 95       	dec	r18
 65c:	e1 f7       	brne	.-8      	; 0x656 <main+0xe0>
	RMS_V_Print[16] = ASCII_Transmit(RMS_V[0]);
 65e:	8c ad       	ldd	r24, Y+60	; 0x3c
 660:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 664:	28 2f       	mov	r18, r24
 666:	ce 01       	movw	r24, r28
 668:	8b 5b       	subi	r24, 0xBB	; 187
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	fc 01       	movw	r30, r24
 66e:	20 8b       	std	Z+16, r18	; 0x10
	RMS_V_Print[17] = ASCII_Transmit(RMS_V[1]);
 670:	8d ad       	ldd	r24, Y+61	; 0x3d
 672:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 676:	28 2f       	mov	r18, r24
 678:	ce 01       	movw	r24, r28
 67a:	8b 5b       	subi	r24, 0xBB	; 187
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	fc 01       	movw	r30, r24
 680:	21 8b       	std	Z+17, r18	; 0x11
	RMS_V_Print[19] = ASCII_Transmit(RMS_V[2]);
 682:	8e ad       	ldd	r24, Y+62	; 0x3e
 684:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 688:	28 2f       	mov	r18, r24
 68a:	ce 01       	movw	r24, r28
 68c:	8b 5b       	subi	r24, 0xBB	; 187
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	fc 01       	movw	r30, r24
 692:	23 8b       	std	Z+19, r18	; 0x13
	char Peak_I_Print[22] = {'P', 'e', 'a', 'k', 32, 'C', 'u', 'r', 'r', 'e', 'n', 't', 32, 'i', 's', ':', 32, 88, 88, 88, 13, 10};
 694:	ce 01       	movw	r24, r28
 696:	85 5a       	subi	r24, 0xA5	; 165
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	26 e1       	ldi	r18, 0x16	; 22
 69c:	e6 e1       	ldi	r30, 0x16	; 22
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	dc 01       	movw	r26, r24
 6a2:	01 90       	ld	r0, Z+
 6a4:	0d 92       	st	X+, r0
 6a6:	2a 95       	dec	r18
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0x12c>
	Peak_I_Print[17] = ASCII_Transmit(Peak_I[0]);
 6aa:	ce 01       	movw	r24, r28
 6ac:	cf 96       	adiw	r24, 0x3f	; 63
 6ae:	fc 01       	movw	r30, r24
 6b0:	80 81       	ld	r24, Z
 6b2:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 6b6:	28 2f       	mov	r18, r24
 6b8:	ce 01       	movw	r24, r28
 6ba:	85 5a       	subi	r24, 0xA5	; 165
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	fc 01       	movw	r30, r24
 6c0:	21 8b       	std	Z+17, r18	; 0x11
	Peak_I_Print[18] = ASCII_Transmit(Peak_I[1]);
 6c2:	ce 01       	movw	r24, r28
 6c4:	cf 96       	adiw	r24, 0x3f	; 63
 6c6:	fc 01       	movw	r30, r24
 6c8:	81 81       	ldd	r24, Z+1	; 0x01
 6ca:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 6ce:	28 2f       	mov	r18, r24
 6d0:	ce 01       	movw	r24, r28
 6d2:	85 5a       	subi	r24, 0xA5	; 165
 6d4:	9f 4f       	sbci	r25, 0xFF	; 255
 6d6:	fc 01       	movw	r30, r24
 6d8:	22 8b       	std	Z+18, r18	; 0x12
	Peak_I_Print[19] = ASCII_Transmit(Peak_I[2]);
 6da:	ce 01       	movw	r24, r28
 6dc:	cf 96       	adiw	r24, 0x3f	; 63
 6de:	fc 01       	movw	r30, r24
 6e0:	82 81       	ldd	r24, Z+2	; 0x02
 6e2:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 6e6:	28 2f       	mov	r18, r24
 6e8:	ce 01       	movw	r24, r28
 6ea:	85 5a       	subi	r24, 0xA5	; 165
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	fc 01       	movw	r30, r24
 6f0:	23 8b       	std	Z+19, r18	; 0x13
	char Power_Print[18] = {'P', 'o', 'w', 'e', 'r', 32, 'i', 's', ':', 32, 88, 46, 88, 88, 13, 10, 13, 10};
 6f2:	ce 01       	movw	r24, r28
 6f4:	8f 58       	subi	r24, 0x8F	; 143
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	22 e1       	ldi	r18, 0x12	; 18
 6fa:	ec e2       	ldi	r30, 0x2C	; 44
 6fc:	f1 e0       	ldi	r31, 0x01	; 1
 6fe:	dc 01       	movw	r26, r24
 700:	01 90       	ld	r0, Z+
 702:	0d 92       	st	X+, r0
 704:	2a 95       	dec	r18
 706:	e1 f7       	brne	.-8      	; 0x700 <main+0x18a>
	Power_Print[10] = ASCII_Transmit(P[0]);
 708:	ce 01       	movw	r24, r28
 70a:	8e 5b       	subi	r24, 0xBE	; 190
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	fc 01       	movw	r30, r24
 710:	80 81       	ld	r24, Z
 712:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 716:	28 2f       	mov	r18, r24
 718:	ce 01       	movw	r24, r28
 71a:	8f 58       	subi	r24, 0x8F	; 143
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	fc 01       	movw	r30, r24
 720:	22 87       	std	Z+10, r18	; 0x0a
	Power_Print[12] = ASCII_Transmit(P[1]);
 722:	ce 01       	movw	r24, r28
 724:	8e 5b       	subi	r24, 0xBE	; 190
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	fc 01       	movw	r30, r24
 72a:	81 81       	ldd	r24, Z+1	; 0x01
 72c:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 730:	28 2f       	mov	r18, r24
 732:	ce 01       	movw	r24, r28
 734:	8f 58       	subi	r24, 0x8F	; 143
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	fc 01       	movw	r30, r24
 73a:	24 87       	std	Z+12, r18	; 0x0c
	Power_Print[13] = ASCII_Transmit(P[2]);
 73c:	ce 01       	movw	r24, r28
 73e:	8e 5b       	subi	r24, 0xBE	; 190
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	fc 01       	movw	r30, r24
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	0e 94 4b 00 	call	0x96	; 0x96 <ASCII_Transmit>
 74a:	28 2f       	mov	r18, r24
 74c:	ce 01       	movw	r24, r28
 74e:	8f 58       	subi	r24, 0x8F	; 143
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	fc 01       	movw	r30, r24
 754:	25 87       	std	Z+13, r18	; 0x0d
	
    while (1) 
    {
		for (uint8_t count1 = 0; count1 < 22; count1++)
 756:	19 82       	std	Y+1, r1	; 0x01
 758:	81 c0       	rjmp	.+258    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		{
			usart_transmit(RMS_V_Print[count1]);
 75a:	89 81       	ldd	r24, Y+1	; 0x01
 75c:	88 2f       	mov	r24, r24
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	9e 01       	movw	r18, r28
 762:	2b 5b       	subi	r18, 0xBB	; 187
 764:	3f 4f       	sbci	r19, 0xFF	; 255
 766:	82 0f       	add	r24, r18
 768:	93 1f       	adc	r25, r19
 76a:	fc 01       	movw	r30, r24
 76c:	80 81       	ld	r24, Z
 76e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <usart_transmit>
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	a0 e7       	ldi	r26, 0x70	; 112
 778:	b1 e4       	ldi	r27, 0x41	; 65
 77a:	88 8b       	std	Y+16, r24	; 0x10
 77c:	99 8b       	std	Y+17, r25	; 0x11
 77e:	aa 8b       	std	Y+18, r26	; 0x12
 780:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 782:	20 e0       	ldi	r18, 0x00	; 0
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	4a e7       	ldi	r20, 0x7A	; 122
 788:	53 e4       	ldi	r21, 0x43	; 67
 78a:	68 89       	ldd	r22, Y+16	; 0x10
 78c:	79 89       	ldd	r23, Y+17	; 0x11
 78e:	8a 89       	ldd	r24, Y+18	; 0x12
 790:	9b 89       	ldd	r25, Y+19	; 0x13
 792:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 796:	dc 01       	movw	r26, r24
 798:	cb 01       	movw	r24, r22
 79a:	8c 8b       	std	Y+20, r24	; 0x14
 79c:	9d 8b       	std	Y+21, r25	; 0x15
 79e:	ae 8b       	std	Y+22, r26	; 0x16
 7a0:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 7a2:	20 e0       	ldi	r18, 0x00	; 0
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	40 e8       	ldi	r20, 0x80	; 128
 7a8:	5f e3       	ldi	r21, 0x3F	; 63
 7aa:	6c 89       	ldd	r22, Y+20	; 0x14
 7ac:	7d 89       	ldd	r23, Y+21	; 0x15
 7ae:	8e 89       	ldd	r24, Y+22	; 0x16
 7b0:	9f 89       	ldd	r25, Y+23	; 0x17
 7b2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 7b6:	88 23       	and	r24, r24
 7b8:	2c f4       	brge	.+10     	; 0x7c4 <main+0x24e>
		__ticks = 1;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	99 8f       	std	Y+25, r25	; 0x19
 7c0:	88 8f       	std	Y+24, r24	; 0x18
 7c2:	3f c0       	rjmp	.+126    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	else if (__tmp > 65535)
 7c4:	20 e0       	ldi	r18, 0x00	; 0
 7c6:	3f ef       	ldi	r19, 0xFF	; 255
 7c8:	4f e7       	ldi	r20, 0x7F	; 127
 7ca:	57 e4       	ldi	r21, 0x47	; 71
 7cc:	6c 89       	ldd	r22, Y+20	; 0x14
 7ce:	7d 89       	ldd	r23, Y+21	; 0x15
 7d0:	8e 89       	ldd	r24, Y+22	; 0x16
 7d2:	9f 89       	ldd	r25, Y+23	; 0x17
 7d4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 7d8:	18 16       	cp	r1, r24
 7da:	4c f5       	brge	.+82     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	40 e2       	ldi	r20, 0x20	; 32
 7e2:	51 e4       	ldi	r21, 0x41	; 65
 7e4:	68 89       	ldd	r22, Y+16	; 0x10
 7e6:	79 89       	ldd	r23, Y+17	; 0x11
 7e8:	8a 89       	ldd	r24, Y+18	; 0x12
 7ea:	9b 89       	ldd	r25, Y+19	; 0x13
 7ec:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 7f0:	dc 01       	movw	r26, r24
 7f2:	cb 01       	movw	r24, r22
 7f4:	bc 01       	movw	r22, r24
 7f6:	cd 01       	movw	r24, r26
 7f8:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 7fc:	dc 01       	movw	r26, r24
 7fe:	cb 01       	movw	r24, r22
 800:	99 8f       	std	Y+25, r25	; 0x19
 802:	88 8f       	std	Y+24, r24	; 0x18
 804:	0f c0       	rjmp	.+30     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 806:	89 e1       	ldi	r24, 0x19	; 25
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	9b 8f       	std	Y+27, r25	; 0x1b
 80c:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 80e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 810:	9b 8d       	ldd	r25, Y+27	; 0x1b
 812:	01 97       	sbiw	r24, 0x01	; 1
 814:	f1 f7       	brne	.-4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 816:	9b 8f       	std	Y+27, r25	; 0x1b
 818:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 81a:	88 8d       	ldd	r24, Y+24	; 0x18
 81c:	99 8d       	ldd	r25, Y+25	; 0x19
 81e:	01 97       	sbiw	r24, 0x01	; 1
 820:	99 8f       	std	Y+25, r25	; 0x19
 822:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 824:	88 8d       	ldd	r24, Y+24	; 0x18
 826:	99 8d       	ldd	r25, Y+25	; 0x19
 828:	89 2b       	or	r24, r25
 82a:	69 f7       	brne	.-38     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 82c:	14 c0       	rjmp	.+40     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 82e:	6c 89       	ldd	r22, Y+20	; 0x14
 830:	7d 89       	ldd	r23, Y+21	; 0x15
 832:	8e 89       	ldd	r24, Y+22	; 0x16
 834:	9f 89       	ldd	r25, Y+23	; 0x17
 836:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 83a:	dc 01       	movw	r26, r24
 83c:	cb 01       	movw	r24, r22
 83e:	99 8f       	std	Y+25, r25	; 0x19
 840:	88 8f       	std	Y+24, r24	; 0x18
 842:	88 8d       	ldd	r24, Y+24	; 0x18
 844:	99 8d       	ldd	r25, Y+25	; 0x19
 846:	9d 8f       	std	Y+29, r25	; 0x1d
 848:	8c 8f       	std	Y+28, r24	; 0x1c
 84a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 84c:	9d 8d       	ldd	r25, Y+29	; 0x1d
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	f1 f7       	brne	.-4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 852:	9d 8f       	std	Y+29, r25	; 0x1d
 854:	8c 8f       	std	Y+28, r24	; 0x1c
	Power_Print[12] = ASCII_Transmit(P[1]);
	Power_Print[13] = ASCII_Transmit(P[2]);
	
    while (1) 
    {
		for (uint8_t count1 = 0; count1 < 22; count1++)
 856:	89 81       	ldd	r24, Y+1	; 0x01
 858:	8f 5f       	subi	r24, 0xFF	; 255
 85a:	89 83       	std	Y+1, r24	; 0x01
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	86 31       	cpi	r24, 0x16	; 22
 860:	08 f4       	brcc	.+2      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 862:	7b cf       	rjmp	.-266    	; 0x75a <main+0x1e4>
		{
			usart_transmit(RMS_V_Print[count1]);
			_delay_ms(15);
		}
		for (uint8_t count2 = 0; count2 < 22; count2++)
 864:	1a 82       	std	Y+2, r1	; 0x02
 866:	81 c0       	rjmp	.+258    	; 0x96a <__stack+0x6b>
		{
			usart_transmit(Peak_I_Print[count2]);
 868:	8a 81       	ldd	r24, Y+2	; 0x02
 86a:	88 2f       	mov	r24, r24
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	9e 01       	movw	r18, r28
 870:	25 5a       	subi	r18, 0xA5	; 165
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	82 0f       	add	r24, r18
 876:	93 1f       	adc	r25, r19
 878:	fc 01       	movw	r30, r24
 87a:	80 81       	ld	r24, Z
 87c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <usart_transmit>
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	a0 e7       	ldi	r26, 0x70	; 112
 886:	b1 e4       	ldi	r27, 0x41	; 65
 888:	8c 87       	std	Y+12, r24	; 0x0c
 88a:	9d 87       	std	Y+13, r25	; 0x0d
 88c:	ae 87       	std	Y+14, r26	; 0x0e
 88e:	bf 87       	std	Y+15, r27	; 0x0f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 890:	20 e0       	ldi	r18, 0x00	; 0
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	4a e7       	ldi	r20, 0x7A	; 122
 896:	53 e4       	ldi	r21, 0x43	; 67
 898:	6c 85       	ldd	r22, Y+12	; 0x0c
 89a:	7d 85       	ldd	r23, Y+13	; 0x0d
 89c:	8e 85       	ldd	r24, Y+14	; 0x0e
 89e:	9f 85       	ldd	r25, Y+15	; 0x0f
 8a0:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 8a4:	dc 01       	movw	r26, r24
 8a6:	cb 01       	movw	r24, r22
 8a8:	8e 8f       	std	Y+30, r24	; 0x1e
 8aa:	9f 8f       	std	Y+31, r25	; 0x1f
 8ac:	a8 a3       	std	Y+32, r26	; 0x20
 8ae:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
 8b0:	20 e0       	ldi	r18, 0x00	; 0
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	40 e8       	ldi	r20, 0x80	; 128
 8b6:	5f e3       	ldi	r21, 0x3F	; 63
 8b8:	6e 8d       	ldd	r22, Y+30	; 0x1e
 8ba:	7f 8d       	ldd	r23, Y+31	; 0x1f
 8bc:	88 a1       	ldd	r24, Y+32	; 0x20
 8be:	99 a1       	ldd	r25, Y+33	; 0x21
 8c0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 8c4:	88 23       	and	r24, r24
 8c6:	2c f4       	brge	.+10     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
		__ticks = 1;
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	9b a3       	std	Y+35, r25	; 0x23
 8ce:	8a a3       	std	Y+34, r24	; 0x22
 8d0:	3f c0       	rjmp	.+126    	; 0x950 <__stack+0x51>
	else if (__tmp > 65535)
 8d2:	20 e0       	ldi	r18, 0x00	; 0
 8d4:	3f ef       	ldi	r19, 0xFF	; 255
 8d6:	4f e7       	ldi	r20, 0x7F	; 127
 8d8:	57 e4       	ldi	r21, 0x47	; 71
 8da:	6e 8d       	ldd	r22, Y+30	; 0x1e
 8dc:	7f 8d       	ldd	r23, Y+31	; 0x1f
 8de:	88 a1       	ldd	r24, Y+32	; 0x20
 8e0:	99 a1       	ldd	r25, Y+33	; 0x21
 8e2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 8e6:	18 16       	cp	r1, r24
 8e8:	4c f5       	brge	.+82     	; 0x93c <__stack+0x3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 8ea:	20 e0       	ldi	r18, 0x00	; 0
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	40 e2       	ldi	r20, 0x20	; 32
 8f0:	51 e4       	ldi	r21, 0x41	; 65
 8f2:	6c 85       	ldd	r22, Y+12	; 0x0c
 8f4:	7d 85       	ldd	r23, Y+13	; 0x0d
 8f6:	8e 85       	ldd	r24, Y+14	; 0x0e
 8f8:	9f 85       	ldd	r25, Y+15	; 0x0f
 8fa:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 8fe:	dc 01       	movw	r26, r24
 900:	cb 01       	movw	r24, r22
 902:	bc 01       	movw	r22, r24
 904:	cd 01       	movw	r24, r26
 906:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 90a:	dc 01       	movw	r26, r24
 90c:	cb 01       	movw	r24, r22
 90e:	9b a3       	std	Y+35, r25	; 0x23
 910:	8a a3       	std	Y+34, r24	; 0x22
 912:	0f c0       	rjmp	.+30     	; 0x932 <__stack+0x33>
 914:	89 e1       	ldi	r24, 0x19	; 25
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	9d a3       	std	Y+37, r25	; 0x25
 91a:	8c a3       	std	Y+36, r24	; 0x24
 91c:	8c a1       	ldd	r24, Y+36	; 0x24
 91e:	9d a1       	ldd	r25, Y+37	; 0x25
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	f1 f7       	brne	.-4      	; 0x920 <__stack+0x21>
 924:	9d a3       	std	Y+37, r25	; 0x25
 926:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 928:	8a a1       	ldd	r24, Y+34	; 0x22
 92a:	9b a1       	ldd	r25, Y+35	; 0x23
 92c:	01 97       	sbiw	r24, 0x01	; 1
 92e:	9b a3       	std	Y+35, r25	; 0x23
 930:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 932:	8a a1       	ldd	r24, Y+34	; 0x22
 934:	9b a1       	ldd	r25, Y+35	; 0x23
 936:	89 2b       	or	r24, r25
 938:	69 f7       	brne	.-38     	; 0x914 <__stack+0x15>
 93a:	14 c0       	rjmp	.+40     	; 0x964 <__stack+0x65>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 93c:	6e 8d       	ldd	r22, Y+30	; 0x1e
 93e:	7f 8d       	ldd	r23, Y+31	; 0x1f
 940:	88 a1       	ldd	r24, Y+32	; 0x20
 942:	99 a1       	ldd	r25, Y+33	; 0x21
 944:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 948:	dc 01       	movw	r26, r24
 94a:	cb 01       	movw	r24, r22
 94c:	9b a3       	std	Y+35, r25	; 0x23
 94e:	8a a3       	std	Y+34, r24	; 0x22
 950:	8a a1       	ldd	r24, Y+34	; 0x22
 952:	9b a1       	ldd	r25, Y+35	; 0x23
 954:	9f a3       	std	Y+39, r25	; 0x27
 956:	8e a3       	std	Y+38, r24	; 0x26
 958:	8e a1       	ldd	r24, Y+38	; 0x26
 95a:	9f a1       	ldd	r25, Y+39	; 0x27
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <__stack+0x5d>
 960:	9f a3       	std	Y+39, r25	; 0x27
 962:	8e a3       	std	Y+38, r24	; 0x26
		for (uint8_t count1 = 0; count1 < 22; count1++)
		{
			usart_transmit(RMS_V_Print[count1]);
			_delay_ms(15);
		}
		for (uint8_t count2 = 0; count2 < 22; count2++)
 964:	8a 81       	ldd	r24, Y+2	; 0x02
 966:	8f 5f       	subi	r24, 0xFF	; 255
 968:	8a 83       	std	Y+2, r24	; 0x02
 96a:	8a 81       	ldd	r24, Y+2	; 0x02
 96c:	86 31       	cpi	r24, 0x16	; 22
 96e:	08 f4       	brcc	.+2      	; 0x972 <__stack+0x73>
 970:	7b cf       	rjmp	.-266    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
		{
			usart_transmit(Peak_I_Print[count2]);
			_delay_ms(15);
		}
		for (uint8_t count3 = 0; count3 < 18; count3++)
 972:	1b 82       	std	Y+3, r1	; 0x03
 974:	81 c0       	rjmp	.+258    	; 0xa78 <__stack+0x179>
		{
			usart_transmit(Power_Print[count3]);
 976:	8b 81       	ldd	r24, Y+3	; 0x03
 978:	88 2f       	mov	r24, r24
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	9e 01       	movw	r18, r28
 97e:	2f 58       	subi	r18, 0x8F	; 143
 980:	3f 4f       	sbci	r19, 0xFF	; 255
 982:	82 0f       	add	r24, r18
 984:	93 1f       	adc	r25, r19
 986:	fc 01       	movw	r30, r24
 988:	80 81       	ld	r24, Z
 98a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <usart_transmit>
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	a0 e7       	ldi	r26, 0x70	; 112
 994:	b1 e4       	ldi	r27, 0x41	; 65
 996:	8c 83       	std	Y+4, r24	; 0x04
 998:	9d 83       	std	Y+5, r25	; 0x05
 99a:	ae 83       	std	Y+6, r26	; 0x06
 99c:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 99e:	20 e0       	ldi	r18, 0x00	; 0
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	4a e7       	ldi	r20, 0x7A	; 122
 9a4:	53 e4       	ldi	r21, 0x43	; 67
 9a6:	6c 81       	ldd	r22, Y+4	; 0x04
 9a8:	7d 81       	ldd	r23, Y+5	; 0x05
 9aa:	8e 81       	ldd	r24, Y+6	; 0x06
 9ac:	9f 81       	ldd	r25, Y+7	; 0x07
 9ae:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 9b2:	dc 01       	movw	r26, r24
 9b4:	cb 01       	movw	r24, r22
 9b6:	88 a7       	std	Y+40, r24	; 0x28
 9b8:	99 a7       	std	Y+41, r25	; 0x29
 9ba:	aa a7       	std	Y+42, r26	; 0x2a
 9bc:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
 9be:	20 e0       	ldi	r18, 0x00	; 0
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	40 e8       	ldi	r20, 0x80	; 128
 9c4:	5f e3       	ldi	r21, 0x3F	; 63
 9c6:	68 a5       	ldd	r22, Y+40	; 0x28
 9c8:	79 a5       	ldd	r23, Y+41	; 0x29
 9ca:	8a a5       	ldd	r24, Y+42	; 0x2a
 9cc:	9b a5       	ldd	r25, Y+43	; 0x2b
 9ce:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 9d2:	88 23       	and	r24, r24
 9d4:	2c f4       	brge	.+10     	; 0x9e0 <__stack+0xe1>
		__ticks = 1;
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	9d a7       	std	Y+45, r25	; 0x2d
 9dc:	8c a7       	std	Y+44, r24	; 0x2c
 9de:	3f c0       	rjmp	.+126    	; 0xa5e <__stack+0x15f>
	else if (__tmp > 65535)
 9e0:	20 e0       	ldi	r18, 0x00	; 0
 9e2:	3f ef       	ldi	r19, 0xFF	; 255
 9e4:	4f e7       	ldi	r20, 0x7F	; 127
 9e6:	57 e4       	ldi	r21, 0x47	; 71
 9e8:	68 a5       	ldd	r22, Y+40	; 0x28
 9ea:	79 a5       	ldd	r23, Y+41	; 0x29
 9ec:	8a a5       	ldd	r24, Y+42	; 0x2a
 9ee:	9b a5       	ldd	r25, Y+43	; 0x2b
 9f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 9f4:	18 16       	cp	r1, r24
 9f6:	4c f5       	brge	.+82     	; 0xa4a <__stack+0x14b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9f8:	20 e0       	ldi	r18, 0x00	; 0
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	40 e2       	ldi	r20, 0x20	; 32
 9fe:	51 e4       	ldi	r21, 0x41	; 65
 a00:	6c 81       	ldd	r22, Y+4	; 0x04
 a02:	7d 81       	ldd	r23, Y+5	; 0x05
 a04:	8e 81       	ldd	r24, Y+6	; 0x06
 a06:	9f 81       	ldd	r25, Y+7	; 0x07
 a08:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 a0c:	dc 01       	movw	r26, r24
 a0e:	cb 01       	movw	r24, r22
 a10:	bc 01       	movw	r22, r24
 a12:	cd 01       	movw	r24, r26
 a14:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 a18:	dc 01       	movw	r26, r24
 a1a:	cb 01       	movw	r24, r22
 a1c:	9d a7       	std	Y+45, r25	; 0x2d
 a1e:	8c a7       	std	Y+44, r24	; 0x2c
 a20:	0f c0       	rjmp	.+30     	; 0xa40 <__stack+0x141>
 a22:	89 e1       	ldi	r24, 0x19	; 25
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	9f a7       	std	Y+47, r25	; 0x2f
 a28:	8e a7       	std	Y+46, r24	; 0x2e
 a2a:	8e a5       	ldd	r24, Y+46	; 0x2e
 a2c:	9f a5       	ldd	r25, Y+47	; 0x2f
 a2e:	01 97       	sbiw	r24, 0x01	; 1
 a30:	f1 f7       	brne	.-4      	; 0xa2e <__stack+0x12f>
 a32:	9f a7       	std	Y+47, r25	; 0x2f
 a34:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a36:	8c a5       	ldd	r24, Y+44	; 0x2c
 a38:	9d a5       	ldd	r25, Y+45	; 0x2d
 a3a:	01 97       	sbiw	r24, 0x01	; 1
 a3c:	9d a7       	std	Y+45, r25	; 0x2d
 a3e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a40:	8c a5       	ldd	r24, Y+44	; 0x2c
 a42:	9d a5       	ldd	r25, Y+45	; 0x2d
 a44:	89 2b       	or	r24, r25
 a46:	69 f7       	brne	.-38     	; 0xa22 <__stack+0x123>
 a48:	14 c0       	rjmp	.+40     	; 0xa72 <__stack+0x173>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a4a:	68 a5       	ldd	r22, Y+40	; 0x28
 a4c:	79 a5       	ldd	r23, Y+41	; 0x29
 a4e:	8a a5       	ldd	r24, Y+42	; 0x2a
 a50:	9b a5       	ldd	r25, Y+43	; 0x2b
 a52:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 a56:	dc 01       	movw	r26, r24
 a58:	cb 01       	movw	r24, r22
 a5a:	9d a7       	std	Y+45, r25	; 0x2d
 a5c:	8c a7       	std	Y+44, r24	; 0x2c
 a5e:	8c a5       	ldd	r24, Y+44	; 0x2c
 a60:	9d a5       	ldd	r25, Y+45	; 0x2d
 a62:	99 ab       	std	Y+49, r25	; 0x31
 a64:	88 ab       	std	Y+48, r24	; 0x30
 a66:	88 a9       	ldd	r24, Y+48	; 0x30
 a68:	99 a9       	ldd	r25, Y+49	; 0x31
 a6a:	01 97       	sbiw	r24, 0x01	; 1
 a6c:	f1 f7       	brne	.-4      	; 0xa6a <__stack+0x16b>
 a6e:	99 ab       	std	Y+49, r25	; 0x31
 a70:	88 ab       	std	Y+48, r24	; 0x30
		for (uint8_t count2 = 0; count2 < 22; count2++)
		{
			usart_transmit(Peak_I_Print[count2]);
			_delay_ms(15);
		}
		for (uint8_t count3 = 0; count3 < 18; count3++)
 a72:	8b 81       	ldd	r24, Y+3	; 0x03
 a74:	8f 5f       	subi	r24, 0xFF	; 255
 a76:	8b 83       	std	Y+3, r24	; 0x03
 a78:	8b 81       	ldd	r24, Y+3	; 0x03
 a7a:	82 31       	cpi	r24, 0x12	; 18
 a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x181>
 a7e:	7b cf       	rjmp	.-266    	; 0x976 <__stack+0x77>
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	ac e8       	ldi	r26, 0x8C	; 140
 a86:	b2 e4       	ldi	r27, 0x42	; 66
 a88:	88 87       	std	Y+8, r24	; 0x08
 a8a:	99 87       	std	Y+9, r25	; 0x09
 a8c:	aa 87       	std	Y+10, r26	; 0x0a
 a8e:	bb 87       	std	Y+11, r27	; 0x0b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 a90:	20 e0       	ldi	r18, 0x00	; 0
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	4a e7       	ldi	r20, 0x7A	; 122
 a96:	53 e4       	ldi	r21, 0x43	; 67
 a98:	68 85       	ldd	r22, Y+8	; 0x08
 a9a:	79 85       	ldd	r23, Y+9	; 0x09
 a9c:	8a 85       	ldd	r24, Y+10	; 0x0a
 a9e:	9b 85       	ldd	r25, Y+11	; 0x0b
 aa0:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 aa4:	dc 01       	movw	r26, r24
 aa6:	cb 01       	movw	r24, r22
 aa8:	8a ab       	std	Y+50, r24	; 0x32
 aaa:	9b ab       	std	Y+51, r25	; 0x33
 aac:	ac ab       	std	Y+52, r26	; 0x34
 aae:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
 ab0:	20 e0       	ldi	r18, 0x00	; 0
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	40 e8       	ldi	r20, 0x80	; 128
 ab6:	5f e3       	ldi	r21, 0x3F	; 63
 ab8:	6a a9       	ldd	r22, Y+50	; 0x32
 aba:	7b a9       	ldd	r23, Y+51	; 0x33
 abc:	8c a9       	ldd	r24, Y+52	; 0x34
 abe:	9d a9       	ldd	r25, Y+53	; 0x35
 ac0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__cmpsf2>
 ac4:	88 23       	and	r24, r24
 ac6:	2c f4       	brge	.+10     	; 0xad2 <__stack+0x1d3>
		__ticks = 1;
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	9f ab       	std	Y+55, r25	; 0x37
 ace:	8e ab       	std	Y+54, r24	; 0x36
 ad0:	3f c0       	rjmp	.+126    	; 0xb50 <__stack+0x251>
	else if (__tmp > 65535)
 ad2:	20 e0       	ldi	r18, 0x00	; 0
 ad4:	3f ef       	ldi	r19, 0xFF	; 255
 ad6:	4f e7       	ldi	r20, 0x7F	; 127
 ad8:	57 e4       	ldi	r21, 0x47	; 71
 ada:	6a a9       	ldd	r22, Y+50	; 0x32
 adc:	7b a9       	ldd	r23, Y+51	; 0x33
 ade:	8c a9       	ldd	r24, Y+52	; 0x34
 ae0:	9d a9       	ldd	r25, Y+53	; 0x35
 ae2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__gesf2>
 ae6:	18 16       	cp	r1, r24
 ae8:	4c f5       	brge	.+82     	; 0xb3c <__stack+0x23d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 aea:	20 e0       	ldi	r18, 0x00	; 0
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	40 e2       	ldi	r20, 0x20	; 32
 af0:	51 e4       	ldi	r21, 0x41	; 65
 af2:	68 85       	ldd	r22, Y+8	; 0x08
 af4:	79 85       	ldd	r23, Y+9	; 0x09
 af6:	8a 85       	ldd	r24, Y+10	; 0x0a
 af8:	9b 85       	ldd	r25, Y+11	; 0x0b
 afa:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 afe:	dc 01       	movw	r26, r24
 b00:	cb 01       	movw	r24, r22
 b02:	bc 01       	movw	r22, r24
 b04:	cd 01       	movw	r24, r26
 b06:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 b0a:	dc 01       	movw	r26, r24
 b0c:	cb 01       	movw	r24, r22
 b0e:	9f ab       	std	Y+55, r25	; 0x37
 b10:	8e ab       	std	Y+54, r24	; 0x36
 b12:	0f c0       	rjmp	.+30     	; 0xb32 <__stack+0x233>
 b14:	89 e1       	ldi	r24, 0x19	; 25
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	99 af       	std	Y+57, r25	; 0x39
 b1a:	88 af       	std	Y+56, r24	; 0x38
 b1c:	88 ad       	ldd	r24, Y+56	; 0x38
 b1e:	99 ad       	ldd	r25, Y+57	; 0x39
 b20:	01 97       	sbiw	r24, 0x01	; 1
 b22:	f1 f7       	brne	.-4      	; 0xb20 <__stack+0x221>
 b24:	99 af       	std	Y+57, r25	; 0x39
 b26:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b28:	8e a9       	ldd	r24, Y+54	; 0x36
 b2a:	9f a9       	ldd	r25, Y+55	; 0x37
 b2c:	01 97       	sbiw	r24, 0x01	; 1
 b2e:	9f ab       	std	Y+55, r25	; 0x37
 b30:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b32:	8e a9       	ldd	r24, Y+54	; 0x36
 b34:	9f a9       	ldd	r25, Y+55	; 0x37
 b36:	89 2b       	or	r24, r25
 b38:	69 f7       	brne	.-38     	; 0xb14 <__stack+0x215>
 b3a:	14 c0       	rjmp	.+40     	; 0xb64 <__stack+0x265>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 b3c:	6a a9       	ldd	r22, Y+50	; 0x32
 b3e:	7b a9       	ldd	r23, Y+51	; 0x33
 b40:	8c a9       	ldd	r24, Y+52	; 0x34
 b42:	9d a9       	ldd	r25, Y+53	; 0x35
 b44:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixunssfsi>
 b48:	dc 01       	movw	r26, r24
 b4a:	cb 01       	movw	r24, r22
 b4c:	9f ab       	std	Y+55, r25	; 0x37
 b4e:	8e ab       	std	Y+54, r24	; 0x36
 b50:	8e a9       	ldd	r24, Y+54	; 0x36
 b52:	9f a9       	ldd	r25, Y+55	; 0x37
 b54:	9b af       	std	Y+59, r25	; 0x3b
 b56:	8a af       	std	Y+58, r24	; 0x3a
 b58:	8a ad       	ldd	r24, Y+58	; 0x3a
 b5a:	9b ad       	ldd	r25, Y+59	; 0x3b
 b5c:	01 97       	sbiw	r24, 0x01	; 1
 b5e:	f1 f7       	brne	.-4      	; 0xb5c <__stack+0x25d>
 b60:	9b af       	std	Y+59, r25	; 0x3b
 b62:	8a af       	std	Y+58, r24	; 0x3a
			usart_transmit(Power_Print[count3]);
			_delay_ms(15);
		}
		_delay_ms(70);
		/*time: (22 + 22 + 18) * 15ms + 70ms = 1000ms = 1s*/
    }
 b64:	f8 cd       	rjmp	.-1040   	; 0x756 <main+0x1e0>

00000b66 <usart_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "UART.h"

void usart_init(uint16_t ubrr)
{
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	00 d0       	rcall	.+0      	; 0xb6c <usart_init+0x6>
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
 b70:	9a 83       	std	Y+2, r25	; 0x02
 b72:	89 83       	std	Y+1, r24	; 0x01
	UCSR0A |= (1<<UDRE0);
 b74:	80 ec       	ldi	r24, 0xC0	; 192
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	20 ec       	ldi	r18, 0xC0	; 192
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	f9 01       	movw	r30, r18
 b7e:	20 81       	ld	r18, Z
 b80:	20 62       	ori	r18, 0x20	; 32
 b82:	fc 01       	movw	r30, r24
 b84:	20 83       	st	Z, r18
	UCSR0B |= (1<<TXEN0);
 b86:	81 ec       	ldi	r24, 0xC1	; 193
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	21 ec       	ldi	r18, 0xC1	; 193
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	f9 01       	movw	r30, r18
 b90:	20 81       	ld	r18, Z
 b92:	28 60       	ori	r18, 0x08	; 8
 b94:	fc 01       	movw	r30, r24
 b96:	20 83       	st	Z, r18
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 b98:	82 ec       	ldi	r24, 0xC2	; 194
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	22 ec       	ldi	r18, 0xC2	; 194
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	f9 01       	movw	r30, r18
 ba2:	20 81       	ld	r18, Z
 ba4:	26 60       	ori	r18, 0x06	; 6
 ba6:	fc 01       	movw	r30, r24
 ba8:	20 83       	st	Z, r18
	UBRR0H |= (ubrr>>8);
 baa:	85 ec       	ldi	r24, 0xC5	; 197
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	25 ec       	ldi	r18, 0xC5	; 197
 bb0:	30 e0       	ldi	r19, 0x00	; 0
 bb2:	f9 01       	movw	r30, r18
 bb4:	40 81       	ld	r20, Z
 bb6:	29 81       	ldd	r18, Y+1	; 0x01
 bb8:	3a 81       	ldd	r19, Y+2	; 0x02
 bba:	23 2f       	mov	r18, r19
 bbc:	33 27       	eor	r19, r19
 bbe:	24 2b       	or	r18, r20
 bc0:	fc 01       	movw	r30, r24
 bc2:	20 83       	st	Z, r18
	UBRR0L |= ubrr;
 bc4:	84 ec       	ldi	r24, 0xC4	; 196
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	24 ec       	ldi	r18, 0xC4	; 196
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	f9 01       	movw	r30, r18
 bce:	30 81       	ld	r19, Z
 bd0:	29 81       	ldd	r18, Y+1	; 0x01
 bd2:	23 2b       	or	r18, r19
 bd4:	fc 01       	movw	r30, r24
 bd6:	20 83       	st	Z, r18
}
 bd8:	00 00       	nop
 bda:	0f 90       	pop	r0
 bdc:	0f 90       	pop	r0
 bde:	df 91       	pop	r29
 be0:	cf 91       	pop	r28
 be2:	08 95       	ret

00000be4 <usart_transmit>:

void usart_transmit(char data)
{
 be4:	cf 93       	push	r28
 be6:	df 93       	push	r29
 be8:	1f 92       	push	r1
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
 bee:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1<<UDRE0)));
 bf0:	00 00       	nop
 bf2:	80 ec       	ldi	r24, 0xC0	; 192
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	fc 01       	movw	r30, r24
 bf8:	80 81       	ld	r24, Z
 bfa:	88 2f       	mov	r24, r24
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	80 72       	andi	r24, 0x20	; 32
 c00:	99 27       	eor	r25, r25
 c02:	89 2b       	or	r24, r25
 c04:	b1 f3       	breq	.-20     	; 0xbf2 <usart_transmit+0xe>
	UDR0 = data;
 c06:	86 ec       	ldi	r24, 0xC6	; 198
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	29 81       	ldd	r18, Y+1	; 0x01
 c0c:	fc 01       	movw	r30, r24
 c0e:	20 83       	st	Z, r18
 c10:	00 00       	nop
 c12:	0f 90       	pop	r0
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	08 95       	ret

00000c1a <__cmpsf2>:
 c1a:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_cmp>
 c1e:	08 f4       	brcc	.+2      	; 0xc22 <__cmpsf2+0x8>
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	08 95       	ret

00000c24 <__fixunssfsi>:
 c24:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_splitA>
 c28:	88 f0       	brcs	.+34     	; 0xc4c <__fixunssfsi+0x28>
 c2a:	9f 57       	subi	r25, 0x7F	; 127
 c2c:	98 f0       	brcs	.+38     	; 0xc54 <__fixunssfsi+0x30>
 c2e:	b9 2f       	mov	r27, r25
 c30:	99 27       	eor	r25, r25
 c32:	b7 51       	subi	r27, 0x17	; 23
 c34:	b0 f0       	brcs	.+44     	; 0xc62 <__fixunssfsi+0x3e>
 c36:	e1 f0       	breq	.+56     	; 0xc70 <__fixunssfsi+0x4c>
 c38:	66 0f       	add	r22, r22
 c3a:	77 1f       	adc	r23, r23
 c3c:	88 1f       	adc	r24, r24
 c3e:	99 1f       	adc	r25, r25
 c40:	1a f0       	brmi	.+6      	; 0xc48 <__fixunssfsi+0x24>
 c42:	ba 95       	dec	r27
 c44:	c9 f7       	brne	.-14     	; 0xc38 <__fixunssfsi+0x14>
 c46:	14 c0       	rjmp	.+40     	; 0xc70 <__fixunssfsi+0x4c>
 c48:	b1 30       	cpi	r27, 0x01	; 1
 c4a:	91 f0       	breq	.+36     	; 0xc70 <__fixunssfsi+0x4c>
 c4c:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_zero>
 c50:	b1 e0       	ldi	r27, 0x01	; 1
 c52:	08 95       	ret
 c54:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_zero>
 c58:	67 2f       	mov	r22, r23
 c5a:	78 2f       	mov	r23, r24
 c5c:	88 27       	eor	r24, r24
 c5e:	b8 5f       	subi	r27, 0xF8	; 248
 c60:	39 f0       	breq	.+14     	; 0xc70 <__fixunssfsi+0x4c>
 c62:	b9 3f       	cpi	r27, 0xF9	; 249
 c64:	cc f3       	brlt	.-14     	; 0xc58 <__fixunssfsi+0x34>
 c66:	86 95       	lsr	r24
 c68:	77 95       	ror	r23
 c6a:	67 95       	ror	r22
 c6c:	b3 95       	inc	r27
 c6e:	d9 f7       	brne	.-10     	; 0xc66 <__fixunssfsi+0x42>
 c70:	3e f4       	brtc	.+14     	; 0xc80 <__fixunssfsi+0x5c>
 c72:	90 95       	com	r25
 c74:	80 95       	com	r24
 c76:	70 95       	com	r23
 c78:	61 95       	neg	r22
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255
 c7c:	8f 4f       	sbci	r24, 0xFF	; 255
 c7e:	9f 4f       	sbci	r25, 0xFF	; 255
 c80:	08 95       	ret

00000c82 <__fp_cmp>:
 c82:	99 0f       	add	r25, r25
 c84:	00 08       	sbc	r0, r0
 c86:	55 0f       	add	r21, r21
 c88:	aa 0b       	sbc	r26, r26
 c8a:	e0 e8       	ldi	r30, 0x80	; 128
 c8c:	fe ef       	ldi	r31, 0xFE	; 254
 c8e:	16 16       	cp	r1, r22
 c90:	17 06       	cpc	r1, r23
 c92:	e8 07       	cpc	r30, r24
 c94:	f9 07       	cpc	r31, r25
 c96:	c0 f0       	brcs	.+48     	; 0xcc8 <__fp_cmp+0x46>
 c98:	12 16       	cp	r1, r18
 c9a:	13 06       	cpc	r1, r19
 c9c:	e4 07       	cpc	r30, r20
 c9e:	f5 07       	cpc	r31, r21
 ca0:	98 f0       	brcs	.+38     	; 0xcc8 <__fp_cmp+0x46>
 ca2:	62 1b       	sub	r22, r18
 ca4:	73 0b       	sbc	r23, r19
 ca6:	84 0b       	sbc	r24, r20
 ca8:	95 0b       	sbc	r25, r21
 caa:	39 f4       	brne	.+14     	; 0xcba <__fp_cmp+0x38>
 cac:	0a 26       	eor	r0, r26
 cae:	61 f0       	breq	.+24     	; 0xcc8 <__fp_cmp+0x46>
 cb0:	23 2b       	or	r18, r19
 cb2:	24 2b       	or	r18, r20
 cb4:	25 2b       	or	r18, r21
 cb6:	21 f4       	brne	.+8      	; 0xcc0 <__fp_cmp+0x3e>
 cb8:	08 95       	ret
 cba:	0a 26       	eor	r0, r26
 cbc:	09 f4       	brne	.+2      	; 0xcc0 <__fp_cmp+0x3e>
 cbe:	a1 40       	sbci	r26, 0x01	; 1
 cc0:	a6 95       	lsr	r26
 cc2:	8f ef       	ldi	r24, 0xFF	; 255
 cc4:	81 1d       	adc	r24, r1
 cc6:	81 1d       	adc	r24, r1
 cc8:	08 95       	ret

00000cca <__fp_split3>:
 cca:	57 fd       	sbrc	r21, 7
 ccc:	90 58       	subi	r25, 0x80	; 128
 cce:	44 0f       	add	r20, r20
 cd0:	55 1f       	adc	r21, r21
 cd2:	59 f0       	breq	.+22     	; 0xcea <__fp_splitA+0x10>
 cd4:	5f 3f       	cpi	r21, 0xFF	; 255
 cd6:	71 f0       	breq	.+28     	; 0xcf4 <__fp_splitA+0x1a>
 cd8:	47 95       	ror	r20

00000cda <__fp_splitA>:
 cda:	88 0f       	add	r24, r24
 cdc:	97 fb       	bst	r25, 7
 cde:	99 1f       	adc	r25, r25
 ce0:	61 f0       	breq	.+24     	; 0xcfa <__fp_splitA+0x20>
 ce2:	9f 3f       	cpi	r25, 0xFF	; 255
 ce4:	79 f0       	breq	.+30     	; 0xd04 <__fp_splitA+0x2a>
 ce6:	87 95       	ror	r24
 ce8:	08 95       	ret
 cea:	12 16       	cp	r1, r18
 cec:	13 06       	cpc	r1, r19
 cee:	14 06       	cpc	r1, r20
 cf0:	55 1f       	adc	r21, r21
 cf2:	f2 cf       	rjmp	.-28     	; 0xcd8 <__fp_split3+0xe>
 cf4:	46 95       	lsr	r20
 cf6:	f1 df       	rcall	.-30     	; 0xcda <__fp_splitA>
 cf8:	08 c0       	rjmp	.+16     	; 0xd0a <__fp_splitA+0x30>
 cfa:	16 16       	cp	r1, r22
 cfc:	17 06       	cpc	r1, r23
 cfe:	18 06       	cpc	r1, r24
 d00:	99 1f       	adc	r25, r25
 d02:	f1 cf       	rjmp	.-30     	; 0xce6 <__fp_splitA+0xc>
 d04:	86 95       	lsr	r24
 d06:	71 05       	cpc	r23, r1
 d08:	61 05       	cpc	r22, r1
 d0a:	08 94       	sec
 d0c:	08 95       	ret

00000d0e <__fp_zero>:
 d0e:	e8 94       	clt

00000d10 <__fp_szero>:
 d10:	bb 27       	eor	r27, r27
 d12:	66 27       	eor	r22, r22
 d14:	77 27       	eor	r23, r23
 d16:	cb 01       	movw	r24, r22
 d18:	97 f9       	bld	r25, 7
 d1a:	08 95       	ret

00000d1c <__gesf2>:
 d1c:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_cmp>
 d20:	08 f4       	brcc	.+2      	; 0xd24 <__gesf2+0x8>
 d22:	8f ef       	ldi	r24, 0xFF	; 255
 d24:	08 95       	ret

00000d26 <__mulsf3>:
 d26:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3x>
 d2a:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_round>
 d2e:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_pscA>
 d32:	38 f0       	brcs	.+14     	; 0xd42 <__mulsf3+0x1c>
 d34:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscB>
 d38:	20 f0       	brcs	.+8      	; 0xd42 <__mulsf3+0x1c>
 d3a:	95 23       	and	r25, r21
 d3c:	11 f0       	breq	.+4      	; 0xd42 <__mulsf3+0x1c>
 d3e:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>
 d42:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_nan>
 d46:	11 24       	eor	r1, r1
 d48:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_szero>

00000d4c <__mulsf3x>:
 d4c:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_split3>
 d50:	70 f3       	brcs	.-36     	; 0xd2e <__mulsf3+0x8>

00000d52 <__mulsf3_pse>:
 d52:	95 9f       	mul	r25, r21
 d54:	c1 f3       	breq	.-16     	; 0xd46 <__mulsf3+0x20>
 d56:	95 0f       	add	r25, r21
 d58:	50 e0       	ldi	r21, 0x00	; 0
 d5a:	55 1f       	adc	r21, r21
 d5c:	62 9f       	mul	r22, r18
 d5e:	f0 01       	movw	r30, r0
 d60:	72 9f       	mul	r23, r18
 d62:	bb 27       	eor	r27, r27
 d64:	f0 0d       	add	r31, r0
 d66:	b1 1d       	adc	r27, r1
 d68:	63 9f       	mul	r22, r19
 d6a:	aa 27       	eor	r26, r26
 d6c:	f0 0d       	add	r31, r0
 d6e:	b1 1d       	adc	r27, r1
 d70:	aa 1f       	adc	r26, r26
 d72:	64 9f       	mul	r22, r20
 d74:	66 27       	eor	r22, r22
 d76:	b0 0d       	add	r27, r0
 d78:	a1 1d       	adc	r26, r1
 d7a:	66 1f       	adc	r22, r22
 d7c:	82 9f       	mul	r24, r18
 d7e:	22 27       	eor	r18, r18
 d80:	b0 0d       	add	r27, r0
 d82:	a1 1d       	adc	r26, r1
 d84:	62 1f       	adc	r22, r18
 d86:	73 9f       	mul	r23, r19
 d88:	b0 0d       	add	r27, r0
 d8a:	a1 1d       	adc	r26, r1
 d8c:	62 1f       	adc	r22, r18
 d8e:	83 9f       	mul	r24, r19
 d90:	a0 0d       	add	r26, r0
 d92:	61 1d       	adc	r22, r1
 d94:	22 1f       	adc	r18, r18
 d96:	74 9f       	mul	r23, r20
 d98:	33 27       	eor	r19, r19
 d9a:	a0 0d       	add	r26, r0
 d9c:	61 1d       	adc	r22, r1
 d9e:	23 1f       	adc	r18, r19
 da0:	84 9f       	mul	r24, r20
 da2:	60 0d       	add	r22, r0
 da4:	21 1d       	adc	r18, r1
 da6:	82 2f       	mov	r24, r18
 da8:	76 2f       	mov	r23, r22
 daa:	6a 2f       	mov	r22, r26
 dac:	11 24       	eor	r1, r1
 dae:	9f 57       	subi	r25, 0x7F	; 127
 db0:	50 40       	sbci	r21, 0x00	; 0
 db2:	9a f0       	brmi	.+38     	; 0xdda <__mulsf3_pse+0x88>
 db4:	f1 f0       	breq	.+60     	; 0xdf2 <__mulsf3_pse+0xa0>
 db6:	88 23       	and	r24, r24
 db8:	4a f0       	brmi	.+18     	; 0xdcc <__mulsf3_pse+0x7a>
 dba:	ee 0f       	add	r30, r30
 dbc:	ff 1f       	adc	r31, r31
 dbe:	bb 1f       	adc	r27, r27
 dc0:	66 1f       	adc	r22, r22
 dc2:	77 1f       	adc	r23, r23
 dc4:	88 1f       	adc	r24, r24
 dc6:	91 50       	subi	r25, 0x01	; 1
 dc8:	50 40       	sbci	r21, 0x00	; 0
 dca:	a9 f7       	brne	.-22     	; 0xdb6 <__mulsf3_pse+0x64>
 dcc:	9e 3f       	cpi	r25, 0xFE	; 254
 dce:	51 05       	cpc	r21, r1
 dd0:	80 f0       	brcs	.+32     	; 0xdf2 <__mulsf3_pse+0xa0>
 dd2:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>
 dd6:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_szero>
 dda:	5f 3f       	cpi	r21, 0xFF	; 255
 ddc:	e4 f3       	brlt	.-8      	; 0xdd6 <__mulsf3_pse+0x84>
 dde:	98 3e       	cpi	r25, 0xE8	; 232
 de0:	d4 f3       	brlt	.-12     	; 0xdd6 <__mulsf3_pse+0x84>
 de2:	86 95       	lsr	r24
 de4:	77 95       	ror	r23
 de6:	67 95       	ror	r22
 de8:	b7 95       	ror	r27
 dea:	f7 95       	ror	r31
 dec:	e7 95       	ror	r30
 dee:	9f 5f       	subi	r25, 0xFF	; 255
 df0:	c1 f7       	brne	.-16     	; 0xde2 <__mulsf3_pse+0x90>
 df2:	fe 2b       	or	r31, r30
 df4:	88 0f       	add	r24, r24
 df6:	91 1d       	adc	r25, r1
 df8:	96 95       	lsr	r25
 dfa:	87 95       	ror	r24
 dfc:	97 f9       	bld	r25, 7
 dfe:	08 95       	ret

00000e00 <__fp_inf>:
 e00:	97 f9       	bld	r25, 7
 e02:	9f 67       	ori	r25, 0x7F	; 127
 e04:	80 e8       	ldi	r24, 0x80	; 128
 e06:	70 e0       	ldi	r23, 0x00	; 0
 e08:	60 e0       	ldi	r22, 0x00	; 0
 e0a:	08 95       	ret

00000e0c <__fp_nan>:
 e0c:	9f ef       	ldi	r25, 0xFF	; 255
 e0e:	80 ec       	ldi	r24, 0xC0	; 192
 e10:	08 95       	ret

00000e12 <__fp_pscA>:
 e12:	00 24       	eor	r0, r0
 e14:	0a 94       	dec	r0
 e16:	16 16       	cp	r1, r22
 e18:	17 06       	cpc	r1, r23
 e1a:	18 06       	cpc	r1, r24
 e1c:	09 06       	cpc	r0, r25
 e1e:	08 95       	ret

00000e20 <__fp_pscB>:
 e20:	00 24       	eor	r0, r0
 e22:	0a 94       	dec	r0
 e24:	12 16       	cp	r1, r18
 e26:	13 06       	cpc	r1, r19
 e28:	14 06       	cpc	r1, r20
 e2a:	05 06       	cpc	r0, r21
 e2c:	08 95       	ret

00000e2e <__fp_round>:
 e2e:	09 2e       	mov	r0, r25
 e30:	03 94       	inc	r0
 e32:	00 0c       	add	r0, r0
 e34:	11 f4       	brne	.+4      	; 0xe3a <__fp_round+0xc>
 e36:	88 23       	and	r24, r24
 e38:	52 f0       	brmi	.+20     	; 0xe4e <__fp_round+0x20>
 e3a:	bb 0f       	add	r27, r27
 e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fp_round+0x20>
 e3e:	bf 2b       	or	r27, r31
 e40:	11 f4       	brne	.+4      	; 0xe46 <__fp_round+0x18>
 e42:	60 ff       	sbrs	r22, 0
 e44:	04 c0       	rjmp	.+8      	; 0xe4e <__fp_round+0x20>
 e46:	6f 5f       	subi	r22, 0xFF	; 255
 e48:	7f 4f       	sbci	r23, 0xFF	; 255
 e4a:	8f 4f       	sbci	r24, 0xFF	; 255
 e4c:	9f 4f       	sbci	r25, 0xFF	; 255
 e4e:	08 95       	ret

00000e50 <__umulhisi3>:
 e50:	a2 9f       	mul	r26, r18
 e52:	b0 01       	movw	r22, r0
 e54:	b3 9f       	mul	r27, r19
 e56:	c0 01       	movw	r24, r0
 e58:	a3 9f       	mul	r26, r19
 e5a:	70 0d       	add	r23, r0
 e5c:	81 1d       	adc	r24, r1
 e5e:	11 24       	eor	r1, r1
 e60:	91 1d       	adc	r25, r1
 e62:	b2 9f       	mul	r27, r18
 e64:	70 0d       	add	r23, r0
 e66:	81 1d       	adc	r24, r1
 e68:	11 24       	eor	r1, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
